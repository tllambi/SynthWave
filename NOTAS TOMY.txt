#Adaptando libreria:

# VER #  Esta etiqueta aparece en los lugares de este documento donde es necesario revisar algo.

//--- 7-6-2023 ---//

1- Buscar si alguien ya adapto o hizo alguna libreria similar (No hubo suerte)
2- Analizar la libreria y entender bien sus clases, #defines y como hace el begin()
3- En este caso hay muchas definiciones para distintos micros y segun que tipo de comunicacion usemos (I2C o SPI)
4- Imprimi la hoja libreria en papel y empece a marcar solo codigo indispensable para inicializar el display
5- Codigo:

	a- Copie el template de .cpp de los examples del libro
	b- Fui agregando los defines de Adafruit y las estructuras de display.h
	c- Agregue los prototipos de funcion de display.h
	d- Implemente displayInit() hasta el primer displayCodeWrite()
	e- Con la hoja de datos checke como se hace la comunicacion I2C y compare con el codigo de adafruit:
		
		ssd1306_command1(uint8_t c) {
		    wire->beginTransmission(i2caddr);
		    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
		    WIRE_WRITE(c);
		    wire->endTransmission();
		}

		En la seccion "8.1.5.2 MCU I2C Interface" del datasheet del driver SSD1306 estan los pasos a seguir para realizar 
		la comunicacion I2C. Nombres utiles:

			(SA0) --> Slave Address bit 			// Es el bit menos significativo de la direccion de SLAVE, 
										   			// esto permite a traves del pin fisico seleccionar entre 2 
										   			// posibles direcciones de SLAVE. A fines del modulo en general
										   			// esto viene preseteado segun la resolucion del display.

			(“R/W#” bit)  --> Read/Write select bit // R/W# = 1 Read Mode
													// R/W# = 0 Write Mode

			(“D/C#” bit)  --> Data/Command Seccion bit 

			(Co) --> Continuation bit

			(SDA)  --> I2C-bus data signal			// Internamiente son dos buses SDAin SDAout unidos, SDAin funciona como SDA y siempre 
													// debe estar conectado, SDAout puede estar desconectado y en ese caso se deben 
													//ignoran los ACK.

			 (SCL) --> I2C-bus clock signal  		// No encontre ninguna frecuencia recomendada en el datasheet. En Adafruit recomiendan 400kHz

		Los pasos a seguir para realizar la comunicacion son:

			1- El MASTER inicia la comunicacion de datos con la condicion de START. 
					Condicion START:  SDA debe pasar de LOW a HIGH (flanco descendente) mientras 
									  SCL esta en estado alto.

			2- Luego de la condicion de START va la direccion de SLAVE. Para SSD1306 la direccion es "b0111100" o "b0111101" , en hexa 0x3C o 0x3D. 
			   (En Adafruit.cpp encontre que en general 0x3C es para displays de 128x32 y 0x3D para 128x64).

			3- Write Mode comienza al poner R/W# = 0

			4- Se genera un ACK antes de recibir un byte de datos. El ACK se define SDA=0 durante un flanco ascendente de SCL. 

			5- Despues de la trasmision de la direccion de SLAVE se puede enviar el byte de control o datos. El byte de control se conforma por 
			   Co y D/C# seguido de sies 0.

			   	Byte control [ Co|D/C#| 0 | 0 | 0 | 0 | 0 | 0 ]

			   a- Co = 0 --> el paquete que se envia a continuacion contendra datos
			   b- D/C# = 0  --> determina que el siguiente byte de dato actua como COMANDO.
			      D/C# = 1  --> determina que el siguiente byte de dato actua como DATO y se almacena en GDDRAM.

			6- Se genera un ACK luego de cada control byte o data byte.

			7- El modo de lectura termina cuando se aplica la condicion de STOP. 
					Condicion de STOP: SDAin de LOW a HIGH (flanco Ascendente) mientras
									   SCL esta en estado alto.

		En resumen en una transmision veo: 

			START CONDITION + SLAVE ADDRESS + R/W# + ACK + [Co + D/C# + Control Byte + ACK + Data Byte + ACK] + [] + ... + [] + STOP CONDITION

			Para resumir el resumen podemos decir que hay 2 tipos de paquetes en la trasmicion:
				SLAVE ADDRESS: 	[011110XR]  X=0/1   R=R/W#
				CONTROL BYTE:	[CD000000]  C=Co    D=D/C#
				DATA BYTE:		[XXXXXXXX]  
				ACK: 			[0] (En un flanco descendente de SCL)

			Y el flujo de datos seria:

			(Master) --> START CONDITION + SLAVE ADDRESS		 

												ACK <-- (Slave)

			(Master) --> CONTROL BYTE + DATA BYTE

												ACK <-- (Slave)

			(Master) --> CONTROL BYTE + DATA BYTE

												ACK <-- (Slave)

							(Continua...)


			(Master) --> CONTROL BYTE + DATA BYTE

												ACK <-- (Slave)
	       
			(Master) --> STOP CONDITION


	    Ahora que entendi la comunicacion puedo analizar el metodo:

	    ssd1306_command1(uint8_t c) {
		    wire->beginTransmission(i2caddr); 	// Inicia la transmision
		    WIRE_WRITE((uint8_t)0x00); 			// Co = 0, D/C = 0 osea el siguiente paquete va a ser un comando
		    WIRE_WRITE(c);						// c sea el byte del comando
		    wire->endTransmission();			// Finaliza transmision
		}

	f- Analizo commandList()

		ssd1306_commandList(const uint8_t *c, uint8_t n) {
		    wire->beginTransmission(i2caddr);					// Inicia transmision
		    WIRE_WRITE((uint8_t)0x00); 							// Co = 0, D/C = 0 osea el siguiente paquete va a ser un comando
		    uint16_t bytesOut = 1;								// Inicializa un contador de paquetes enviados
		    while (n--) {										// Envio los n paquetes de atras hacia adelante
		      if (bytesOut >= WIRE_MAX) {						//		Si envie mas datos de los que admite el canal entonces reconecto
		      	wire->endTransmission();						//      (dato: WIRE_MAX es el minino entre 255 y el valor dado por el 
		        wire->beginTransmission(i2caddr);				//		micro, habria que buscar si hay data en mbed)
		        WIRE_WRITE((uint8_t)0x00); 						// 		Co = 0, D/C = 0 osea el siguiente paquete va a ser un comando
		        bytesOut = 1;									//		como reinicie reinicio el contador de paquetes enviados # VER # : REVISAR PORQUE HACE ESTO Y SI ES NECESARIO EN EL CORTEX-M7
		      }
		      WIRE_WRITE(pgm_read_byte(c++));					// Busco el dato en memoria de programa y luego incremento en 1 el puntero.
		      bytesOut++;										// Incremento el contador de datos enviados.
		    wire->endTransmission();							// Termino transmision
		}

	g- Analizo Begin():

		bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

		  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))	// Creo un buffer si no existe
		    return false;

		  clearDisplay();																// Limpio el buffer que acabamos de crear

		  vccstate = vcs;

		  i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);						// Segun las dimensiones  del display asigna el SLAVE ADDRESS
		  
		  if (periphBegin)
		    wire->begin();																// Inicia la comunicacion I2C # VER # : Hay que adaptar esto a mbed.h
		
		  

		  // Reset SSD1306 if requested and reset pin specified in constructor			// Si el modulo tiene pin de reset resetea el modulo, no es mi caso posiblemente lo elimine
		  if (reset && (rstPin >= 0)) {
		    pinMode(rstPin, OUTPUT);
		    digitalWrite(rstPin, HIGH);
		    delay(1);                   // VDD goes high at start, pause for 1 ms
		    digitalWrite(rstPin, LOW);  // Bring reset low
		    delay(10);                  // Wait 10 ms
		    digitalWrite(rstPin, HIGH); // Bring out of reset
		  }

		  TRANSACTION_START																// Macro que setea el SCL en la frecuencia correcta # VER # : Es necesario??

		  // # VER # : Aca empieza a enviar comando en un orden diferente al de la hoja de datos, voy a implementarlo tal cual porque se que funciona pero luego deberia hacer una version
		  //			respetando la hoja de datos.

		  // Init sequence			
		  static const uint8_t PROGMEM init1[] = {SSD1306_DISPLAYOFF,         // 0xAE	
		                                          SSD1306_SETDISPLAYCLOCKDIV, // 0xD5
		                                          0x80, // the suggested ratio 0x80
		                                          SSD1306_SETMULTIPLEX}; // 0xA8
		  ssd1306_commandList(init1, sizeof(init1));
		  ssd1306_command1(HEIGHT - 1);

		  static const uint8_t PROGMEM init2[] = {SSD1306_SETDISPLAYOFFSET, // 0xD3
		                                          0x0,                      // no offset
		                                          SSD1306_SETSTARTLINE | 0x0, // line #0
		                                          SSD1306_CHARGEPUMP};        // 0x8D
		  ssd1306_commandList(init2, sizeof(init2));

		  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);

		  static const uint8_t PROGMEM init3[] = {SSD1306_MEMORYMODE, // 0x20
		                                          0x00, // 0x0 act like ks0108
		                                          SSD1306_SEGREMAP | 0x1,
		                                          SSD1306_COMSCANDEC};
		  ssd1306_commandList(init3, sizeof(init3));

		  uint8_t comPins = 0x02;
		  contrast = 0x8F;

		  if ((WIDTH == 128) && (HEIGHT == 32)) {
		    comPins = 0x02;
		    contrast = 0x8F;
		  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
		    comPins = 0x12;
		    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
		  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
		    comPins = 0x2; // ada x12
		    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
		  } else {
		    // Other screen varieties -- TBD
		  }

		  ssd1306_command1(SSD1306_SETCOMPINS);
		  ssd1306_command1(comPins);
		  ssd1306_command1(SSD1306_SETCONTRAST);
		  ssd1306_command1(contrast);

		  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
		  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
		  static const uint8_t PROGMEM init5[] = {
		      SSD1306_SETVCOMDETECT, // 0xDB
		      0x40,
		      SSD1306_DISPLAYALLON_RESUME, // 0xA4
		      SSD1306_NORMALDISPLAY,       // 0xA6
		      SSD1306_DEACTIVATE_SCROLL,
		      SSD1306_DISPLAYON}; // Main screen turn on
		  ssd1306_commandList(init5, sizeof(init5));

		  TRANSACTION_END

		  return true; // Success
		}


//--- 8-6-2023 ---//

6- Hice el codigo como respetando el datasheet y respetando la libreria pero no funcionó :(. Verifique en el codigo que no faltara nada y no encontre nada.
7- Con el tester medi respecto a tierra los 30 pines del display y descubri que ninguno llegaba a 7v o mas. 
8- Conecte el display a otro micro (esp32) que tiene una libreria implementada y funcionando y encontre que hay pines con aprox 7v. Osea que o no estoy haciendo la secuencia de inicio bien o no esta funcionando la comunicacion I2C.
9- Hice la siguiente prueba: 
		-Conecte la tierra de la nucleo y el esp32 
		-Conecte el esp32 a la pantalla y hice la secuencia de inicio 
		-Sin apagar el display desconecte SDA y SCL y los conecte a la nucleo.
		-Envie varios comando desde la nucleo sin efecto

   Conclucion... Algo anda mal con la comunicacion.h

//--- 10-6-2023 ---//

10- Se me ocurrio usar un arduino para capturar los mensajes I2C, el resultado para el ESP32 fue este:


		Mensaje 0: 	0x00
		Mensaje 1:  0xAE
		Mensaje 2:  0xD5
		Mensaje 3:  0x80
		Mensaje 4:  0xA8
		Mensaje 5:  0x00
		Mensaje 6:  0x3F
		Mensaje 7:  0x00
		Mensaje 8:  0xD3
		Mensaje 9:  0x00
		Mensaje 10: 0x40
		Mensaje 11: 0x8D
		Mensaje 12: 0x00
		Mensaje 13: 0x20
		Mensaje 14: 0x00
		Mensaje 15: 0xA1
		Mensaje 16: 0xC8
		Mensaje 17: 0x00
		Mensaje 18: 0x12
		Mensaje 19: 0x00
		Mensaje 20: 0xCF
		Mensaje 21: 0x00
		Mensaje 22: 0xD9
		Mensaje 23: 0x00
		Mensaje 24: 0xF1
		Mensaje 25: 0x00
		Mensaje 26: 0x22
		Mensaje 27: 0x00
		Mensaje 28: 0xFF
		Mensaje 29: 0x21
		Mensaje 30: 0x00
 		
		En la nucleo no recibi nada... asique me puse a ver la documentacion de la nucleo y encontre algo que no habia tenido en cuenta, 
		la direccion es de 7bits y se le agrega un cero para indicar que va a escribir. Encontre este codigo de prueba funciono :D 
		
			/*
			 * Copyright (c) 2014-2020 Arm Limited and affiliates.
			 * SPDX-License-Identifier: Apache-2.0
			 */
		
			#include "mbed.h"
		
			// Read temperature from LM75BD
		
			I2C i2c(I2C_SDA, I2C_SCL);
		
			const int addr7bit = 0x3C;      // 7 bit I2C address
			const int addr8bit = 0x3C << 1; // 8bit I2C address, 0x90
		
			int main()
			{
			    char cmd[2];
			    while (1) {
			        cmd[0] = 0x01;
			        cmd[1] = 0x00;
			        i2c.write(addr8bit, cmd, 2);
		
			        ThisThread::sleep_for(500);
		
			        cmd[0] = 0x00;
			        i2c.write(addr8bit, cmd, 1);
			        i2c.read(addr8bit, cmd, 2);
		
			        float tmp = (float((cmd[0] << 8) | cmd[1]) / 256.0);
			        printf("Temp = %.2f\n", tmp);
			    }
			}
11- Hago los arreglos necesarios a ver que pasa...
12- Funciona!!!! Con la secuencia de prueba copiada de Adafruit funciona genial, con lo que hice siguiendo el datasheet no funciona. Tengo que 
testear porque, por ahora voy a agregar todas las funciones de dibujo.

//--- 11-6-2023 ---//
13- Acondicione la funcion que imprime bitmaps pero aun no funciona

//--- 26-6-2023 ---//
14- Sigo con el problema de los bitmaps, con un Arduino "simule" un dispositivo con direccion 0x3C
    y capture todos los paquetes que envia el ESP32 y luego hice una funcion "magicInit()" que reenvia 
    esos paquetes.

    La idea es que el esp32 hace una secuencia de inicio y imprime un bitmap. Por alguna razon que no 
    termino de entender no funciona. 

//--- 27-6-2023 ---//

15- Hice un metodo para enviar comandos por terminal Serie. Comprobé que funcionan los comandos de
    invertir colores, modo patalla en blanco, modo patalla normal y scroll de imagen derecho e 
    izquierdo. La imagen esta conformada por ruido en la GDDRAM (Graphic Display Data RAM). 
    Osea que la secuencia de inicio deberia esta bien, el problema esta en que no estoy cargando bien 
    el bitmap en la GDDRAM.

//--- 29-6-2023 ---//
 
16- Agregué otros comandos por terminal serie.

//--- 1-7-2023 ---//

17- Cambie el metodo displayCommandList(), antes enviaba 0x00 antes de cada byte en la lista que se le 
    pasaba como parametro. Me di cuenta que quizas lo mas correcto es enviar solo un 0x00 y luego la lista
    porque muchas veces es necesario enviar un comando y seguido a esto uno más valores. Si envio 0x00 entre
    valores estaría diciendo que esos valores son comandos tambien. No observo cambios de todas formas

//--- 2-7-2023 ---//

18- No entiendo porque no puedo cargar los bits en la RAM, voy a escribir que formas tengo de enviar datos a la
     RAM del display para aclarar ideas:

    1- Seteo el modo de direccionamiento a la ram, tengo 3 modos:
        a- Page addressing mode
        b- Horizontal addressing mode
        c- Vertical addressing mode

        a- Page addressing mode:
            -Después de leer/escribir la RAM el puntero columna aumenta automanticamente en 1.
            -Una vez llega a la ultima columna, el puntero columna se reinicia pero el puntero pagina NO
            -Hay que establecer las direcciones de la nueva página y columna para poder acceder al contenido RAM 
                de la siguiente página.
        b- Horizontal addressing mode:
            